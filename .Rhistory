```{r}
barplot(stp_per_day$tt_steps, names.arg=stp_per_day$date,width = 0.1)
```
### Calculating mean and median "total steps per day" values
Using common R functions
```{r}
stp_mean<-mean(stp_per_day$tt_steps)
stp_med<-median(stp_per_day$tt_steps)
```
The mean number of steps per day is **`r stp_mean`**.
The median number of steps per day is **`r stp_med`**.
##What is the average daily activity pattern?
### Aggregating data by time-period
Using aggregate function
```{r}
stp_per_tp<-aggregate(data$steps, by=list(data$interval), "mean",na.rm=TRUE, na.action=NULL)
names(stp_per_tp)<-c("interval","mean_steps")
```
### Producing an histogram
```{r}
plot(stp_per_tp$interval,stp_per_tp$mean_steps, type="l",
xlab="time-period", ylab="mean steps")
```
### Max time-period
time-period with max mean steps:
```{r}
max_mean_step_tp<-
stp_per_tp[which.max(stp_per_tp$mean_steps),1]
max_mean_step_val<-round(
stp_per_tp[which.max(stp_per_tp$mean_steps),2],digits=2)
```
The time period with max mean number of steps is interval **`r max_mean_step_tp`**.
The max mean steps value is **`r max_mean_step_val`**.
##Imputing missing values
### Total number of missing values in the dataset
```{r}
nb_na_rows<-NROW(data[,1])-NROW(na.omit(data[,1]))
```
There are **`r nb_na_rows`** out of `r NROW(data[,1])` rows.
###  Filling in all of the missing values
In order to fill missing value we will feed median values for interval in the dataset. In order to do this we'll create a modified datasample names _**datam**_.
```{r}
datam<-data
for i in
```
View(stp_per_tp)
View(stp_per_tp)
merge(datam,stp_per_tp,by=c("interval"))
z<-merge(datam,stp_per_tp,by=c("interval"))
View(z)
View(stp_per_tp)
View(stp_per_tp)
?is.Na
?is.na
for (i in 1:NROW(datam))
{if(is.na(datam[i,1]){datam[i,1]<-9999}
}
for (i in (1:NROW(datam))
{if(is.na(datam[i,1]){datam[i,1]<-9999}
}
for (i in (1:NROW(datam))
{if(is.na(datam[i,1]){datam[i,1]<-9999}}
1:NROW(datam)
for (i in (1:NROW(datam))
{datam[i,1]<-9999}
for (i in (1:10)
{datam[i,1]<-9999}
for (i in (1:10)
{print(i)}
for (i in (1:10))
{print(i)}
for (i in (1:NROW(datam)))
{if(is.na(datam[i,1]){datam[i,1]<-9999}}
for (i in (1:NROW(datam)))
{if(is.na(datam[i,1])){datam[i,1]<-9999}}
View(datam)
View(datam)
View(stp_per_tp)
datam<-data
View(datam)
View(datam)
rownames(stp_per_tp)
rownames(stp_per_tp)<-stp_per_tp$interval
View(stp_per_tp)
View(stp_per_tp)
stp_per_tp[5,]
---
title: "Reproducible research peer assignment 1"
author: "vjanes"
date: "Sunday, December 14, 2014"
output: html_document
---
Peer assignment one for the Coursera Data Science specialty's *Reproducible research* course.
##Loading and preprocessing the data
## Reading datafiles
```{r}
unzip("activity.zip")
data<-read.csv("activity.csv", colClasses = c("integer","Date","integer"))
```
##What is mean total number of steps taken per day?
### Aggregating data by day
Using aggregate function
```{r}
stp_per_day<-aggregate(data$steps, by=list(data$date), "sum",na.rm=TRUE, na.action=NULL)
names(stp_per_day)<-c("date","tt_steps")
```
### Producing an histogram
Using barplot
```{r}
barplot(stp_per_day$tt_steps, names.arg=stp_per_day$date,width = 0.1)
```
### Calculating mean and median "total steps per day" values
Using common R functions
```{r}
stp_mean<-mean(stp_per_day$tt_steps)
stp_med<-median(stp_per_day$tt_steps)
```
The mean number of steps per day is **`r stp_mean`**.
The median number of steps per day is **`r stp_med`**.
##What is the average daily activity pattern?
### Aggregating data by time-period
Using aggregate function
```{r}
stp_per_tp<-aggregate(data$steps, by=list(data$interval), "mean",na.rm=TRUE, na.action=NULL)
names(stp_per_tp)<-c("interval","mean_steps")
```
### Producing an histogram
```{r}
plot(stp_per_tp$interval,stp_per_tp$mean_steps, type="l",
xlab="time-period", ylab="mean steps")
```
### Max time-period
time-period with max mean steps:
```{r}
max_mean_step_tp<-
stp_per_tp[which.max(stp_per_tp$mean_steps),1]
max_mean_step_val<-round(
stp_per_tp[which.max(stp_per_tp$mean_steps),2],digits=2)
```
The time period with max mean number of steps is interval **`r max_mean_step_tp`**.
The max mean steps value is **`r max_mean_step_val`**.
##Imputing missing values
### Total number of missing values in the dataset
```{r}
nb_na_rows<-NROW(data[,1])-NROW(na.omit(data[,1]))
```
There are **`r nb_na_rows`** out of `r NROW(data[,1])` rows.
---
title: "Reproducible research peer assignment 1"
author: "vjanes"
date: "Sunday, December 14, 2014"
output: html_document
---
Peer assignment one for the Coursera Data Science specialty's *Reproducible research* course.
##Loading and preprocessing the data
## Reading datafiles
```{r}
unzip("activity.zip")
data<-read.csv("activity.csv", colClasses = c("integer","Date","integer"))
```
##What is mean total number of steps taken per day?
### Aggregating data by day
Using aggregate function
```{r}
stp_per_day<-aggregate(data$steps, by=list(data$date), "sum",na.rm=TRUE, na.action=NULL)
names(stp_per_day)<-c("date","tt_steps")
```
### Producing an histogram
Using barplot
```{r}
barplot(stp_per_day$tt_steps, names.arg=stp_per_day$date,width = 0.1)
```
### Calculating mean and median "total steps per day" values
Using common R functions
```{r}
stp_mean<-mean(stp_per_day$tt_steps)
stp_med<-median(stp_per_day$tt_steps)
```
The mean number of steps per day is **`r stp_mean`**.
The median number of steps per day is **`r stp_med`**.
##What is the average daily activity pattern?
### Aggregating data by time-period
Using aggregate function
```{r}
stp_per_tp<-aggregate(data$steps, by=list(data$interval), "mean",na.rm=TRUE, na.action=NULL)
names(stp_per_tp)<-c("interval","mean_steps")
```
### Producing an histogram
```{r}
plot(stp_per_tp$interval,stp_per_tp$mean_steps, type="l",
xlab="time-period", ylab="mean steps")
```
### Max time-period
time-period with max mean steps:
```{r}
max_mean_step_tp<-
stp_per_tp[which.max(stp_per_tp$mean_steps),1]
max_mean_step_val<-round(
stp_per_tp[which.max(stp_per_tp$mean_steps),2],digits=2)
```
The time period with max mean number of steps is interval **`r max_mean_step_tp`**.
The max mean steps value is **`r max_mean_step_val`**.
##Imputing missing values
### Total number of missing values in the dataset
```{r}
nb_na_rows<-NROW(data[,1])-NROW(na.omit(data[,1]))
```
There are **`r nb_na_rows`** out of `r NROW(data[,1])` rows.
datam<-data
datam<-data
for (i in (1:NROW(datam)))
{if(is.na(datam[i,1])){datam[i,1]<-9999}}
View(datam)
View(datam)
View(stp_per_day)
View(stp_per_day)
View(stp_per_tp)
View(stp_per_tp)
which(stp_per_tp$interval=5)
which(stp_per_tp$interval==5)
stp_per_tp[which(stp_per_tp$interval==5),]
View(datam)
datam<-data
for (i in (1:NROW(datam)))
{if(is.na(datam[i,1]))
{datam[i,1]<-stp_per_tp[which(stp_per_tp$interval==datam[i,1]),2]}}
i<-110
datam[i,1]<-
stp_per_tp[which(stp_per_tp$interval==datam[i,1]),2]
data[i,]
i<-110
datam[i,1]<-
stp_per_tp[which(stp_per_tp$interval==datam[i,1]),2]
datam[i,]
i<-110
datam[i,1]<- stp_per_tp[which(stp_per_tp$interval==datam[i,1]),2]
datam[i,]
stp_per_tp[which(stp_per_tp$interval==datam[i,1]),2]
stp_per_tp[as.integer(which(stp_per_tp$interval==datam[i,1])),2]
which(stp_per_tp$interval==datam[i,1])
which(stp_per_tp$interval==5)
which(stp_per_tp$interval==as.integer(datam[i,1]))
datam[i,1]
datam<-data
for (i in (1:NROW(datam)))
{
if(is.na(datam[i,1]))
{datam[i,1]<-
stp_per_tp[which(stp_per_tp$interval==datam[i,3]),2]}}
View(datam)
View(datam)
stp_per_daym<-aggregate(datam$steps, by=list(datam$date), "sum",na.rm=TRUE, na.action=NULL)
names(stp_per_daym)<-c("date","tt_steps")
stp_per_daym<-aggregate(datam$steps, by=list(datam$date), "sum",na.rm=TRUE, na.action=NULL)
names(stp_per_daym)<-c("date","tt_steps")
barplot(stp_per_daym$tt_steps, names.arg=stp_per_day$date,width = 0.1)
stp_per_daym<-aggregate(datam$steps, by=list(datam$date), "sum",na.rm=TRUE, na.action=NULL)
names(stp_per_daym)<-c("date","tt_steps")
barplot(stp_per_daym$tt_steps, names.arg=stp_per_day$date,width = 0.1, main = "Total steps per day, completed sample")
stp_per_daym<-aggregate(datam$steps, by=list(datam$date), "sum",na.rm=TRUE, na.action=NULL)
names(stp_per_daym)<-c("date","tt_steps")
barplot(stp_per_daym$tt_steps, names.arg=stp_per_day$date,width = 0.1, main = "Total steps per day", sub="completed sample")
stp_per_daym<-aggregate(datam$steps, by=list(datam$date), "sum",na.rm=TRUE, na.action=NULL)
names(stp_per_daym)<-c("date","tt_steps")
barplot(stp_per_daym$tt_steps, names.arg=stp_per_day$date,width = 0.1, main = "Total steps per day,
completed sample")
stp_per_daym<-aggregate(datam$steps, by=list(datam$date), "sum",na.rm=TRUE, na.action=NULL)
names(stp_per_daym)<-c("date","tt_steps")
barplot(stp_per_daym$tt_steps, names.arg=stp_per_day$date,width = 0.1, main = "Total steps per day,
completed sample")
stp_meanm<-mean(stp_per_daym$tt_steps)
stp_medm<-median(stp_per_daym$tt_steps)
```{r}
plot(stp_per_tp$interval,stp_per_tp$mean_steps, type="l",
xlab="time-period", ylab="mean steps",title="Mean number of steps by time-period")
plot(stp_per_tp$interval,stp_per_tp$mean_steps, type="l",
xlab="time-period", ylab="mean steps",main="Mean number of steps by time-period")
weekdays(datam[1,2])
as.integer(weekdays(datam[1,2]))
weekdays(datam[1,2])
weekdays(datam[1,2])
Sys.setlocale("LC_TIME", "English")
weekdays(datam[1,2])
weekdays(c(1..7))
weekdays(1)
weekdays(01-01-2001)
weekdays('01-01-2001')
weekdays("01-01-2001")
weekdays(datam[1,200])
weekdays(datam[1,200])
weekdays(datam[2000,2])
WE_table<-cbind(
c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday")),
c("non_WE","non_WE","non_WE","non_WE","non_WE","non_WE","WE","WE")
WE_table<-cbind(
c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday")),
c("non_WE","non_WE","non_WE","non_WE","non_WE","non_WE","WE","WE"))
WE_table<-cbind(
cbind("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday")),
cbind("non_WE","non_WE","non_WE","non_WE","non_WE","non_WE","WE","WE"))
cbind("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday")
WE_table<-cbind(
rbind("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday")),
rbind("non_WE","non_WE","non_WE","non_WE","non_WE","non_WE","WE","WE"))
WE_table<-cbind(
rbind("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"),
rbind("non_WE","non_WE","non_WE","non_WE","non_WE","non_WE","WE","WE"))
WE_table<-cbind(
rbind("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"),
rbind("non_WE","non_WE","non_WE","non_WE","non_WE","WE","WE"))
View(WE_table)
View(WE_table)
data<-cbind(data,weekdays(data$date))
View(data)
View(data)
data<-read.csv("activity.csv", colClasses = c("integer","Date","integer"))
View(data)
dataw<-cbind(data,weekday=weekdays(data$date))
View(dataw)
View(dataw)
View(WE_table)
View(WE_table)
WE_table<-cbind(
weekday=rbind("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"),
is_we=rbind("non_WE","non_WE","non_WE","non_WE","non_WE","WE","WE"))
View(WE_table)
View(WE_table)
WE_table<-cbind(
rbind("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"),rbind("non_WE","non_WE","non_WE","non_WE","non_WE","WE","WE"))
colnames(WE_table)<-c("weekday","is_we")
View(WE_table)
View(WE_table)
dataw<-merge(dataw,WE_table,by="weekday")
View(dataw)
View(dataw)
dataw<-dataw[,-1]
View(dataw)
View(dataw)
dataw<-cbind(data,weekday=weekdays(data$date))
dataw<-merge(dataw,WE_table,by="weekday")
which(dataw$interval=0)
which(dataw$interval==0)
dataw[which(dataw$interval==0),]
?order
dataw[order(which(dataw$interval==0)),]
View(dataw)
View(data)
dataw$interval
order(which(dataw$interval==0)
order(which(dataw$interval==0)
order(which(dataw$interval==0))
View(dataw)
View(dataw)
which(dataw$interval==0)
dataw[which(dataw$interval==0),]
dataw[which(dataw$interval==0),c(3,1,5)]
samdataw<-dataw[which(dataw$interval==0),c(3,1,5)]
samdataw[order(date)]
samdataw[order(date),]
View(samdataw)
samdataw[order(date,weekday),]
samdataw[order(samdataw$date),]
head(samdataw[order(samdataw$date),],digit=10)
head(samdataw[order(samdataw$date),],digits=10)
?head
head(samdataw[order(samdataw$date),],n=10)
head(samdataw[order(samdataw$date),-1],n=12)
samdataw<-dataw[which(dataw$interval==0),c(3,1,5)]
head(samdataw[order(samdataw$date),],n=10)
samdataw<-dataw[which(dataw$interval==0),c(3,1,5)]
row.names(samdataw) <- NULL
head(samdataw[order(samdataw$date),],n=10)
samdataw<-dataw[which(dataw$interval==0),c(3,1,5)]
samdataw<-samdataw[order(samdataw$date),]
row.names(samdataw) <- NULL
head(samdataw[order(samdataw$date),],n=10)
View(dataw)
mean_stp_per_tp_we_non_we<-aggregate(dataw$steps, by=list(data$interval,data$is_we), "mean",na.rm=TRUE, na.action=NULL)
stp_interv_we<-aggregate(dataw$steps, by=list(dataw$interval,dataw$is_we), "mean",na.rm=TRUE, na.action=NULL)
View(stp_interv_we)
View(stp_interv_we)
library(lattice)
View(dataw)
View(dataw)
View(stp_interv_we)
View(stp_interv_we)
View(stp_interv_we)
colnames(stp_interv_we)<-c("interval","is_we","steps")
View(stp_interv_we)
xyplot(steps~interval|is_we, data=stp_interv_we, type="l")
---
title: "Reproducible research peer assignment 1"
author: "vjanes"
date: "Sunday, December 14, 2014"
output: html_document
---
Peer assignment one for the Coursera Data Science specialty's *Reproducible research* course.
##Loading and preprocessing the data
```{r}
Sys.setlocale("LC_TIME", "English")
```
## Reading datafiles
```{r}
unzip("activity.zip")
data<-read.csv("activity.csv", colClasses = c("integer","Date","integer"))
```
##What is mean total number of steps taken per day?
### Aggregating data by day
Using aggregate function
```{r}
stp_per_day<-aggregate(data$steps, by=list(data$date), "sum",na.rm=TRUE, na.action=NULL)
names(stp_per_day)<-c("date","tt_steps")
```
### Producing an histogram
Using barplot
```{r}
barplot(stp_per_day$tt_steps, names.arg=stp_per_day$date,width = 0.1,main="Total number of steps by day")
```
### Calculating mean and median "total steps per day" values
Using common R functions
```{r}
stp_mean<-mean(stp_per_day$tt_steps)
stp_med<-median(stp_per_day$tt_steps)
```
The mean number of steps per day is **`r stp_mean`**.
The median number of steps per day is **`r stp_med`**.
##What is the average daily activity pattern?
### Aggregating data by time-period
Using aggregate function
```{r}
stp_per_tp<-aggregate(data$steps, by=list(data$interval), "mean",na.rm=TRUE, na.action=NULL)
names(stp_per_tp)<-c("interval","mean_steps")
```
### Producing an histogram
```{r}
plot(stp_per_tp$interval,stp_per_tp$mean_steps, type="l",
xlab="time-period", ylab="mean steps",main="Mean number of steps by time-period")
```
### Max time-period
time-period with max mean steps:
```{r}
max_mean_step_tp<-
stp_per_tp[which.max(stp_per_tp$mean_steps),1]
max_mean_step_val<-round(
stp_per_tp[which.max(stp_per_tp$mean_steps),2],digits=2)
```
The time period with max mean number of steps is interval **`r max_mean_step_tp`**.
The max mean steps value is **`r max_mean_step_val`**.
##Imputing missing values
### Total number of missing values in the dataset
```{r}
nb_na_rows<-NROW(data[,1])-NROW(na.omit(data[,1]))
```
There are **`r nb_na_rows`** out of `r NROW(data[,1])` rows.
###  Filling in all of the missing values
In order to fill missing value we will feed median values for interval in the dataset. In order to do this we'll create a modified datasample names _**datam**_.
```{r}
datam<-data
for (i in (1:NROW(datam)))
{
if(is.na(datam[i,1]))
{datam[i,1]<-
stp_per_tp[which(stp_per_tp$interval==datam[i,3]),2]}}
```
### Producing an histogram for completed data
```{r}
stp_per_daym<-aggregate(datam$steps, by=list(datam$date), "sum",na.rm=TRUE, na.action=NULL)
names(stp_per_daym)<-c("date","tt_steps")
barplot(stp_per_daym$tt_steps, names.arg=stp_per_day$date,width = 0.1, main = "Total steps per day,
completed sample")
```
```{r}
stp_meanm<-mean(stp_per_daym$tt_steps)
stp_medm<-median(stp_per_daym$tt_steps)
```
The mean number of steps per day is **`r stp_meanm`** for completed sample.
The median number of steps per day is **`r stp_medm`** for completed sample.  **Both mean and median have slightly increased**.
##Are there differences in activity patterns between weekdays and weekends?
###Defining WE/non-WE days
Creating the WE/non-WE table:
```{r}
WE_table<-cbind(
rbind("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"),rbind("non_WE","non_WE","non_WE","non_WE","non_WE","WE","WE"))
colnames(WE_table)<-c("weekday","is_we")
```
Applying to data, displaying result sample:
```{r}
dataw<-cbind(data,weekday=weekdays(data$date))
dataw<-merge(dataw,WE_table,by="weekday")
##displaying result sample
samdataw<-dataw[which(dataw$interval==0),c(3,1,5)]
samdataw<-samdataw[order(samdataw$date),]
row.names(samdataw) <- NULL
head(samdataw[order(samdataw$date),],n=10)
```
###Comparing WE/non-WE days
```{r}
library(lattice)
stp_interv_we<-aggregate(dataw$steps, by=list(dataw$interval,dataw$is_we), "mean",na.rm=TRUE, na.action=NULL)
colnames(stp_interv_we)<-c("interval","is_we","steps")
xyplot(steps~interval|is_we, data=stp_interv_we, type="l")
```
stp_interv_we<-aggregate(dataw$steps, by=list(dataw$interval,dataw$is_we), "mean",na.rm=TRUE, na.action=NULL)
colnames(stp_interv_we)<-c("interval","is_we","steps")
xyplot(steps~interval|is_we, data=stp_interv_we, type="l")
xyplot(steps~interval|is_we, data=stp_interv_we, type="l")
knit2html()
knit2html()
install.package("knitr")
install.packages("knitr")
knit2html()
?knit2html
